# Python Console Script - Bulk User Update t·ª´ File
# Ch·∫°y trong ERPNext Console

import frappe
import os
from frappe.utils import formatdate

def bulk_update_users_from_file(file_path=None):
    """
    C·∫≠p nh·∫≠t h√†ng lo·∫°t users t·ª´ file user_list.txt c√πng th∆∞ m·ª•c
    """
    
    # T·ª± ƒë·ªông t√¨m file user_list.txt c√πng th∆∞ m·ª•c
    if file_path is None:
        # L·∫•y th∆∞ m·ª•c hi·ªán t·∫°i
        try:
            current_dir = os.path.dirname(os.path.abspath(__file__))
        except:
            # Khi ch·∫°y trong console, __file__ kh√¥ng t·ªìn t·∫°i
            current_dir = frappe.get_site_path()
        
        file_path = os.path.join(current_dir, 'user_list.txt')
        print(f"üìÇ T·ª± ƒë·ªông t√¨m file: {file_path}")
    
    # Ki·ªÉm tra file t·ªìn t·∫°i
    if not os.path.exists(file_path):
        print(f"‚ùå File kh√¥ng t·ªìn t·∫°i: {file_path}")
        print(f"üí° H√£y t·∫°o file user_list.txt trong th∆∞ m·ª•c: {os.path.dirname(file_path)}")
        return
    
    # ƒê·ªçc danh s√°ch User ID t·ª´ file
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            user_ids = [line.strip() for line in file.readlines() if line.strip()]
    except Exception as e:
        print(f"‚ùå L·ªói ƒë·ªçc file: {str(e)}")
        return
    
    if not user_ids:
        print(f"‚ùå File r·ªóng!")
        return
        
    print(f"üìù ƒê·ªçc ƒë∆∞·ª£c {len(user_ids)} User ID t·ª´ file")
    print("=" * 60)
    
    # Counters
    success_count = 0
    error_count = 0
    errors = []
    
    # L·∫•y t·∫•t c·∫£ modules
    try:
        all_modules = frappe.get_all("Module Def", fields=["name"])
        module_names = [m.name for m in all_modules]
        
        print(f"üì¶ T√¨m th·∫•y {len(all_modules)} modules")
        if "TIQN App" in module_names:
            print(f"‚úÖ Module 'TIQN App' c√≥ s·∫µn")
        else:
            print(f"‚ö†Ô∏è  Module 'TIQN App' KH√îNG c√≥!")
            
    except Exception as e:
        print(f"‚ùå L·ªói l·∫•y modules: {str(e)}")
        return
    
    print("=" * 60)
    
    # X·ª≠ l√Ω t·ª´ng User
    for i, user_id in enumerate(user_ids, 1):
        try:
            print(f"\nüîÑ [{i}/{len(user_ids)}] User: {user_id}")
            
            # Ki·ªÉm tra User t·ªìn t·∫°i
            if not frappe.db.exists("User", user_id):
                error_msg = f"User kh√¥ng t·ªìn t·∫°i: {user_id}"
                print(f"‚ùå {error_msg}")
                errors.append(error_msg)
                error_count += 1
                continue
            
            # L·∫•y User document
            user_doc = frappe.get_doc("User", user_id)
            
            # === 1. T√åM EMPLOYEE V√Ä T·∫†O PASSWORD ===
            employee = None
            if user_doc.email:
                # T√¨m Employee theo email
                employees = frappe.get_all("Employee", 
                                         filters={"company_email": user_doc.email}, 
                                         fields=["name", "date_of_birth"])
                if not employees:
                    employees = frappe.get_all("Employee", 
                                             filters={"personal_email": user_doc.email}, 
                                             fields=["name", "date_of_birth"])
                if employees:
                    employee = employees[0]
                    print(f"  üë§ Employee: {employee.name}")
                    
            # T·∫°o password
            if employee and employee.date_of_birth:
                emp_id_proper = employee.name.title()  # PROPER
                dob_formatted = formatdate(employee.date_of_birth, "ddMM")  # ddmm
                new_password = f"{emp_id_proper}{dob_formatted}"
                user_doc.new_password = new_password
                print(f"  üîë Password: {new_password}")
            else:
                print(f"  ‚ö†Ô∏è  Kh√¥ng t·∫°o ƒë∆∞·ª£c password - thi·∫øu Employee/ng√†y sinh")
            
            # === 2. CLEAR V√Ä SET ROLES ===
            user_doc.roles = []  # X√≥a t·∫•t c·∫£ roles
            user_doc.append("roles", {
                "role": "TIQN Registration"
            })
            print(f"  üë• Role: TIQN Registration (ƒë√£ x√≥a t·∫•t c·∫£ roles c≈©)")
            
            # === 3. THI·∫æT L·∫¨P MODULES - QUAN TR·ªåNG ===
            # Clear t·∫•t c·∫£ block_modules c≈©
            user_doc.block_modules = []
            
            # Logic: ƒê·ªÉ ch·ªâ allow TIQN App, ta ph·∫£i:
            # - Kh√¥ng th√™m TIQN App v√†o block_modules (ƒë·ªÉ n√≥ ƒë∆∞·ª£c allow)
            # - Th√™m t·∫•t c·∫£ modules kh√°c v·ªõi blocked=1
            
            modules_blocked = 0
            for module in all_modules:
                if module.name != "TIQN App":  # Block t·∫•t c·∫£ tr·ª´ TIQN App
                    user_doc.append("block_modules", {
                        "module": module.name,
                        "blocked": 1  # Block
                    })
                    modules_blocked += 1
            
            print(f"  üì± Modules: Blocked {modules_blocked} modules, ch·ªâ allow 'TIQN App'")
            
            # === 4. SET DEFAULT WORKSPACE ===
            user_doc.default_workspace = "Registration"
            print(f"  üè† Default Workspace: Registration")
            
            # === 5. SET LANGUAGE ===
            user_doc.language = "vi"
            print(f"  üåê Language: vi")
            
            # === L∆ØU USER ===
            user_doc.flags.ignore_permissions = True
            user_doc.save()
            
            # Commit sau khi save th√†nh c√¥ng
            frappe.db.commit()
            
            print(f"‚úÖ Th√†nh c√¥ng: {user_id}")
            success_count += 1
            
        except Exception as e:
            error_msg = f"L·ªói {user_id}: {str(e)}"
            print(f"‚ùå {error_msg}")
            errors.append(error_msg)
            error_count += 1
            # Rollback n·∫øu c√≥ l·ªói
            frappe.db.rollback()
        
        # Separator
        if i < len(user_ids):
            print("-" * 40)
    
    # === B√ÅO C√ÅO K·∫æT QU·∫¢ ===
    print("\n" + "=" * 60)
    print("üìä K·∫æT QU·∫¢ CU·ªêI C√ôNG:")
    print(f"‚úÖ Th√†nh c√¥ng: {success_count}/{len(user_ids)} users")
    print(f"‚ùå Th·∫•t b·∫°i: {error_count}/{len(user_ids)} users")
    
    if errors:
        print(f"\nüö® CHI TI·∫æT L·ªñI:")
        for j, error in enumerate(errors, 1):
            print(f"  {j}. {error}")
    
    print(f"\nüéØ C√ÅC THI·∫æT L·∫¨P ƒê√É √ÅP D·ª§NG:")
    print(f"  üë• Role: TIQN Registration (x√≥a h·∫øt roles c≈©)")
    print(f"  üì± Module: Ch·ªâ allow TIQN App (block t·∫•t c·∫£ kh√°c)")
    print(f"  üè† Workspace: Registration") 
    print(f"  üåê Language: vi")
    print(f"  üîë Password: PROPER(EmployeeID) + ddmm")
    
    print(f"\nüéâ HO√ÄN TH√ÄNH!")

# ==================== C√ÅCH S·ª¨ D·ª§NG ====================

def run():
    """Ch·∫°y script - t·ª± ƒë·ªông ƒë·ªçc file user_list.txt"""
    bulk_update_users_from_file()

# ==================== H∆Ø·ªöNG D·∫™N ====================
print("""
üöÄ C√ÅCH S·ª¨ D·ª§NG:

1. T·∫°o file 'user_list.txt' c√πng th∆∞ m·ª•c script:
   user1@tiqn.com.vn
   user2@tiqn.com.vn
   user3@tiqn.com.vn

2. Ch·∫°y l·ªánh:
   run()

3. Script s·∫Ω t·ª± ƒë·ªông √°p d·ª•ng:
   ‚úÖ Role: TIQN Registration
   ‚úÖ Module: Ch·ªâ allow TIQN App  
   ‚úÖ Workspace: Registration
   ‚úÖ Language: vi
   ‚úÖ Password: PROPER(EmployeeID) + ddmm
""")

# CH·∫†Y SCRIPT:
# run()

# UNCOMMENT ƒê·ªÇ CH·∫†Y NGAY:
# run()
# bench --site erp.tiqn.local console
# import customize_erpnext.api.bulk_update_users_from_file.bulk_update_users_from_file as script
# script.run() 