import os
import frappe
import re
from datetime import datetime

# Th∆∞ m·ª•c ch·ª©a c√°c file script server
SERVER_SCRIPT_FOLDER_PARENT = os.path.abspath(os.path.join(os.path.dirname(__file__), "../server_scripts"))

def create_update_server_scripts(reference_document_type=None, script_name=None):
    """
    C·∫≠p nh·∫≠t ho·∫∑c t·∫°o m·ªõi Server Scripts t·ª´ th∆∞ m·ª•c server_scripts v√†o ERPNext.
    C√°c th√¥ng tin Script Type, Reference Document Type, DocType Event ƒë∆∞·ª£c tr√≠ch xu·∫•t
    t·ª´ c√°c comment ƒë·∫ßu ti√™n trong file.
    
    Parameters:
    reference_document_type (str, optional): T√™n c·ªßa reference document type (t∆∞∆°ng ·ª©ng v·ªõi th∆∞ m·ª•c con).
    script_name (str, optional): T√™n c·ªßa script (t∆∞∆°ng ·ª©ng v·ªõi t√™n file kh√¥ng c√≥ ph·∫ßn m·ªü r·ªông).
    
    Behavior:
    - N·∫øu reference_document_type=None & script_name=None: √°p d·ª•ng cho to√†n b·ªô file trong c√°c th∆∞ m·ª•c con
    - N·∫øu reference_document_type!=None & script_name=None: √°p d·ª•ng cho to√†n b·ªô file trong th∆∞ m·ª•c server_scripts/reference_document_type
    - N·∫øu reference_document_type!=None & script_name!=None: √°p d·ª•ng cho file script_name.py trong th∆∞ m·ª•c. 
      N·∫øu ch∆∞a t·ªìn t·∫°i script_name tr√™n database th√¨ th·ª±c hi·ªán t·∫°o m·ªõi
    """
    
    # Tr∆∞·ªùng h·ª£p 1: Qu√©t c√°c th∆∞ m·ª•c con c·ªßa th∆∞ m·ª•c g·ªëc
    if reference_document_type is None and script_name is None:
        print(f"üìÇ ƒêang qu√©t c√°c th∆∞ m·ª•c con c·ªßa: {SERVER_SCRIPT_FOLDER_PARENT}")
        
        # ƒê·∫øm t·ªïng s·ªë file s·∫Ω x·ª≠ l√Ω ƒë·ªÉ hi·ªÉn th·ªã x√°c nh·∫≠n
        total_files = count_py_files_in_subdirectories(SERVER_SCRIPT_FOLDER_PARENT)
        
        if total_files == 0:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file .py n√†o trong c√°c th∆∞ m·ª•c con.")
            return
        
        if not confirm_operation(f"S·∫Ω x·ª≠ l√Ω {total_files} file server script trong t·∫•t c·∫£ c√°c th∆∞ m·ª•c con. Ti·∫øp t·ª•c?"):
            print("‚ùå ƒê√£ h·ªßy thao t√°c.")
            return
        
        # L·∫•y danh s√°ch c√°c th∆∞ m·ª•c con
        subdirs = [d for d in os.listdir(SERVER_SCRIPT_FOLDER_PARENT) 
                  if os.path.isdir(os.path.join(SERVER_SCRIPT_FOLDER_PARENT, d))]
        
        if not subdirs:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c con n√†o trong th∆∞ m·ª•c g·ªëc.")
            return
        
        for sub_folder in subdirs:
            # G·ªçi h√†m v·ªõi reference_document_type l√† t√™n th∆∞ m·ª•c con, nh∆∞ng kh√¥ng c·∫ßn x√°c nh·∫≠n l·∫°i
            create_update_server_scripts_without_confirmation(reference_document_type=sub_folder)
        
        print("‚úÖ ƒê√£ ho√†n th√†nh x·ª≠ l√Ω to√†n b·ªô th∆∞ m·ª•c con.")
        return
    
    # Tr∆∞·ªùng h·ª£p 2 v√† 3: reference_document_type ƒë√£ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
    SCRIPT_FOLDER = os.path.join(SERVER_SCRIPT_FOLDER_PARENT, reference_document_type)
    
    if not os.path.exists(SCRIPT_FOLDER):
        print(f"‚ùå Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {SCRIPT_FOLDER}")
        return
    
    # Tr∆∞·ªùng h·ª£p 3: X·ª≠ l√Ω m·ªôt file c·ª• th·ªÉ
    if script_name is not None:
        file_name = f"{script_name}.py"
        file_path = os.path.join(SCRIPT_FOLDER, file_name)
        
        if not os.path.exists(file_path):
            print(f"‚ùå File kh√¥ng t·ªìn t·∫°i: {file_path}")
            return
        
        process_server_script_file(file_path=file_path, script_name=script_name)
        return
    
    # Tr∆∞·ªùng h·ª£p 2: X·ª≠ l√Ω t·∫•t c·∫£ c√°c file trong th∆∞ m·ª•c
    py_files = [f for f in os.listdir(SCRIPT_FOLDER) if f.endswith(".py")]
    if not py_files:
        print(f"‚ö†Ô∏è Kh√¥ng c√≥ file .py n√†o trong th∆∞ m·ª•c: {SCRIPT_FOLDER}")
        return
    
    if not confirm_operation(f"S·∫Ω x·ª≠ l√Ω {len(py_files)} file server script trong th∆∞ m·ª•c {reference_document_type}. Ti·∫øp t·ª•c?"):
        print("‚ùå ƒê√£ h·ªßy thao t√°c.")
        return
    
    print(f"üìÇ ƒêang qu√©t th∆∞ m·ª•c: {SCRIPT_FOLDER}")
    
    for file_name in py_files:
        file_path = os.path.join(SCRIPT_FOLDER, file_name)
        script_name = file_name.replace(".py", "")
        
        process_server_script_file(file_path=file_path, script_name=script_name)

def create_update_server_scripts_without_confirmation(reference_document_type):
    """
    Phi√™n b·∫£n kh√¥ng y√™u c·∫ßu x√°c nh·∫≠n c·ªßa h√†m ch√≠nh, d√πng cho x·ª≠ l√Ω ƒë·ªá quy c√°c th∆∞ m·ª•c con
    sau khi ƒë√£ x√°c nh·∫≠n ·ªü c·∫•p cao nh·∫•t.
    """
    SCRIPT_FOLDER = os.path.join(SERVER_SCRIPT_FOLDER_PARENT, reference_document_type)
    
    if not os.path.exists(SCRIPT_FOLDER):
        print(f"‚ùå Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {SCRIPT_FOLDER}")
        return
    
    print(f"üìÇ ƒêang qu√©t th∆∞ m·ª•c: {SCRIPT_FOLDER}")
    
    for file_name in os.listdir(SCRIPT_FOLDER):
        if file_name.endswith(".py"):
            file_path = os.path.join(SCRIPT_FOLDER, file_name)
            script_name = file_name.replace(".py", "")
            
            process_server_script_file(file_path=file_path, script_name=script_name)

def count_py_files_in_subdirectories(folder_path):
    """
    ƒê·∫øm s·ªë l∆∞·ª£ng file .py trong c√°c th∆∞ m·ª•c con, b·ªè qua c√°c file tr·ª±c ti·∫øp trong th∆∞ m·ª•c g·ªëc
    """
    count = 0
    # L·∫∑p qua c√°c m·ª•c trong th∆∞ m·ª•c g·ªëc
    for item in os.listdir(folder_path):
        item_path = os.path.join(folder_path, item)
        # Ch·ªâ x·ª≠ l√Ω c√°c th∆∞ m·ª•c, b·ªè qua file
        if os.path.isdir(item_path):
            # ƒê·∫øm c√°c file .py trong th∆∞ m·ª•c con n√†y v√† c√°c th∆∞ m·ª•c con c·ªßa n√≥
            for root, dirs, files in os.walk(item_path):
                count += sum(1 for f in files if f.endswith('.py'))
    return count

def confirm_operation(message):
    """
    Hi·ªÉn th·ªã th√¥ng b√°o x√°c nh·∫≠n v√† tr·∫£ v·ªÅ True n·∫øu ng∆∞·ªùi d√πng ƒë·ªìng √Ω, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ False
    """
    response = input(f"\n‚ö†Ô∏è {message} (y/n): ")
    return response.lower() in ['y', 'yes']

def extract_script_metadata(script_content):
    """
    Tr√≠ch xu·∫•t th√¥ng tin metadata t·ª´ c√°c comment ƒë·∫ßu ti√™n c·ªßa file script
    
    Returns:
    dict: Dictionary ch·ª©a c√°c th√¥ng tin metadata c·ªßa script
    """
    metadata = {
        'script_type': 'DocType Event',  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh
        'reference_doctype': None,
        'doctype_event': 'Before Save'   # Gi√° tr·ªã m·∫∑c ƒë·ªãnh
    }
    
    # L·∫•y c√°c d√≤ng ƒë·∫ßu ti√™n c·ªßa file ƒë·ªÉ t√¨m metadata
    lines = script_content.split('\n')[:10]  # Ch·ªâ x√©t 10 d√≤ng ƒë·∫ßu ti√™n
    
    # Pattern ƒë·ªÉ t√¨m c√°c comment metadata
    script_type_pattern = r'#\s*Script Type\s*:\s*(.+)'
    reference_doctype_pattern = r'#\s*Reference Document Type\s*:\s*(.+)'
    doctype_event_pattern = r'#\s*DocType Event\s*:\s*(.+)'
    
    for line in lines:
        # T√¨m Script Type
        script_type_match = re.search(script_type_pattern, line)
        if script_type_match:
            metadata['script_type'] = script_type_match.group(1).strip()
            continue
            
        # T√¨m Reference Document Type
        reference_doctype_match = re.search(reference_doctype_pattern, line)
        if reference_doctype_match:
            metadata['reference_doctype'] = reference_doctype_match.group(1).strip()
            continue
            
        # T√¨m DocType Event
        doctype_event_match = re.search(doctype_event_pattern, line)
        if doctype_event_match:
            metadata['doctype_event'] = doctype_event_match.group(1).strip()
            continue
    
    return metadata

def get_current_user():
    """
    L·∫•y th√¥ng tin user ƒëang thao t√°c v·ªõi script th√¥ng qua l·ªánh whoami
    
    Returns:
    str: T√™n c·ªßa user ƒëang thao t√°c v·ªõi h·ªá th·ªëng
    """
    try:
        # S·ª≠ d·ª•ng l·ªánh whoami ƒë·ªÉ l·∫•y t√™n ng∆∞·ªùi d√πng hi·ªán t·∫°i
        import subprocess
        user_login = subprocess.check_output(['whoami'], text=True).strip()
        # Ensure user_login is returned correctly
        match user_login:
            case 'son_nt':
                user = 'son.nt@tiqn.com.vn'
            case 'vinh_nt': 
                user = 'vinh.nt@tiqn.com.vn'
            case 'frappe': 
                user = 'Administrator'  
        return user
    except Exception as e:
        # Ghi log l·ªói v√† tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh an to√†n
        print(f"Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi d√πng hi·ªán t·∫°i: {str(e)}")
        return "Unknown User"

def process_server_script_file(file_path, script_name):
    """
    X·ª≠ l√Ω m·ªôt file server script: ƒë·ªçc n·ªôi dung, tr√≠ch xu·∫•t metadata v√† c·∫≠p nh·∫≠t ho·∫∑c t·∫°o m·ªõi trong database
    
    Parameters:
    file_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file script
    script_name (str): T√™n c·ªßa script (kh√¥ng bao g·ªìm ph·∫ßn m·ªü r·ªông .py)
    """
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            script_content = file.read()
        
        file_name = os.path.basename(file_path)
        print(f"üìÑ ƒê·ªçc file: {file_name}")
        
        # Tr√≠ch xu·∫•t metadata t·ª´ n·ªôi dung script
        metadata = extract_script_metadata(script_content)
        
        # L·∫•y th√¥ng tin th·ªùi gian hi·ªán t·∫°i v√† ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        current_user = get_current_user()
        
        # Th√™m th·ªùi gian v√† user v√†o script tr∆∞·ªõc khi update ho·∫∑c t·∫°o m·ªõi
        lines = script_content.split('\n')
        metadata_end_index = 0
        
        # T√¨m v·ªã tr√≠ k·∫øt th√∫c c·ªßa metadata
        for i, line in enumerate(lines[:10]):
            if (re.search(r'#\s*Script Type\s*:', line) or 
                re.search(r'#\s*Reference Document Type\s*:', line) or 
                re.search(r'#\s*DocType Event\s*:', line)):
                metadata_end_index = i + 1
        
        # Th√™m Update at v√† User sau metadata
        update_info = [
            f"# Update at: {current_time}",
            f"# Updated by: {current_user}"
        ]
        
        # Lo·∫°i b·ªè c√°c d√≤ng Update at v√† Updated by c≈© n·∫øu c√≥
        filtered_lines = []
        for i, line in enumerate(lines):
            if not (re.search(r'#\s*Update at\s*:', line) or re.search(r'#\s*Updated by\s*:', line)):
                filtered_lines.append(line)
        
        # Ch√®n th√¥ng tin update v√†o sau metadata
        updated_lines = filtered_lines[:metadata_end_index] + update_info + filtered_lines[metadata_end_index:]
        updated_script = '\n'.join(updated_lines)
        
        # Ki·ªÉm tra script c√≥ t·ªìn t·∫°i trong DB kh√¥ng
        existing_script = frappe.get_value("Server Script", script_name, "name")
        
        if existing_script:
            # C·∫≠p nh·∫≠t script v√†o DB
            frappe.db.set_value("Server Script", script_name, "script", updated_script)
            
            # C·∫≠p nh·∫≠t c√°c th√¥ng tin metadata
            frappe.db.set_value("Server Script", script_name, "script_type", metadata['script_type'])
            
            if metadata['reference_doctype']:
                frappe.db.set_value("Server Script", script_name, "reference_doctype", metadata['reference_doctype'])
            
            # C·∫≠p nh·∫≠t doctype_event n·∫øu script_type l√† DocType Event
            if metadata['script_type'] == 'DocType Event':
                frappe.db.set_value("Server Script", script_name, "doctype_event", metadata['doctype_event'])
                
            frappe.db.commit()
            print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t: {script_name}")
        else:
            # T·∫°o m·ªõi Server Script
            doc = frappe.new_doc("Server Script")
            doc.name = script_name
            doc.script = updated_script
            doc.script_type = metadata['script_type']
            
            if metadata['reference_doctype']:
                doc.reference_doctype = metadata['reference_doctype']
            else:
                # L·∫•y t√™n th∆∞ m·ª•c ch·ª©a l√†m reference_doctype n·∫øu kh√¥ng c√≥ trong metadata
                doc.reference_doctype = os.path.basename(os.path.dirname(file_path))
            
            # Thi·∫øt l·∫≠p doctype_event n·∫øu script_type l√† DocType Event
            if metadata['script_type'] == 'DocType Event':
                doc.doctype_event = metadata['doctype_event']
                
            doc.enabled = 1  # M·∫∑c ƒë·ªãnh l√† b·∫≠t
            doc.insert()
            frappe.db.commit()
            
            ref_doctype = metadata['reference_doctype'] or os.path.basename(os.path.dirname(file_path))
            print(f"‚úÖ ƒê√£ t·∫°o m·ªõi: {script_name} cho DocType: {ref_doctype}")
    
    except Exception as e:
        print(f"‚ùå L·ªói khi x·ª≠ l√Ω {os.path.basename(file_path)}: {e}")

'''
bench --site erp.tiqn.local console
import custom_features.custom_features.bulk_update_scripts.create_update_server_scripts as script
1. Create, update all file.py in all sub-folder of "server_scripts": 
    script.create_update_server_scripts()
2. Create, update all file.py in ONE sub-folder of "server_scripts": 
    script.create_update_server_scripts(reference_document_type="Item")
3. Create, update ONE file.py in ONE sub-folder of "server_scripts": 
    script.create_update_server_scripts(reference_document_type="Item", script_name="item_variants_after_insert") 
'''                