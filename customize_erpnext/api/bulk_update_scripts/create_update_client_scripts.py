import os
import frappe
from datetime import datetime

# Th∆∞ m·ª•c ch·ª©a c√°c file script
SCRIPT_FOLDER_PARENT = os.path.abspath(os.path.join(os.path.dirname(__file__), "../client_scripts"))

def create_update_client_scripts(doc_type=None, script_name=None):
    """
    C·∫≠p nh·∫≠t ho·∫∑c t·∫°o m·ªõi Client Scripts t·ª´ th∆∞ m·ª•c client_scripts v√†o ERPNext.
    
    Parameters:
    doc_type (str, optional): T√™n c·ªßa document type. M·∫∑c ƒë·ªãnh l√† None.
    script_name (str, optional): T√™n c·ªßa script. M·∫∑c ƒë·ªãnh l√† None.
    
    Behavior:
    - N·∫øu doc_type=None & script_name=None: √°p d·ª•ng cho to√†n b·ªô file trong c√°c th∆∞ m·ª•c con c·ªßa SCRIPT_FOLDER_PARENT
    - N·∫øu doc_type!=None & script_name=None: √°p d·ª•ng cho to√†n b·ªô file trong SCRIPT_FOLDER
    - N·∫øu doc_type!=None & script_name!=None: √°p d·ª•ng cho file script_name.js trong SCRIPT_FOLDER.
      N·∫øu ch∆∞a t·ªìn t·∫°i script_name tr√™n database th√¨ th·ª±c hi·ªán t·∫°o m·ªõi
    """
    
    # Tr∆∞·ªùng h·ª£p 1: Qu√©t c√°c th∆∞ m·ª•c con c·ªßa th∆∞ m·ª•c g·ªëc, b·ªè qua c√°c file trong th∆∞ m·ª•c g·ªëc
    if doc_type is None and script_name is None:
        print(f"üìÇ ƒêang qu√©t c√°c th∆∞ m·ª•c con c·ªßa: {SCRIPT_FOLDER_PARENT}")
        
        # ƒê·∫øm t·ªïng s·ªë file s·∫Ω x·ª≠ l√Ω ƒë·ªÉ hi·ªÉn th·ªã x√°c nh·∫≠n (kh√¥ng t√≠nh c√°c file tr·ª±c ti·∫øp trong SCRIPT_FOLDER_PARENT)
        total_files = count_js_files_in_subdirectories(SCRIPT_FOLDER_PARENT)
        
        if total_files == 0:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file .js n√†o trong c√°c th∆∞ m·ª•c con.")
            return
        
        if not confirm_operation(f"S·∫Ω x·ª≠ l√Ω {total_files} file script trong t·∫•t c·∫£ c√°c th∆∞ m·ª•c con. Ti·∫øp t·ª•c?"):
            print("‚ùå ƒê√£ h·ªßy thao t√°c.")
            return
        
        # L·∫•y danh s√°ch c√°c th∆∞ m·ª•c con (ƒë·∫°i di·ªán cho c√°c doc_type)
        subdirs = [d for d in os.listdir(SCRIPT_FOLDER_PARENT) 
                  if os.path.isdir(os.path.join(SCRIPT_FOLDER_PARENT, d))]
        
        if not subdirs:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c con n√†o trong th∆∞ m·ª•c g·ªëc.")
            return
        
        for sub_folder in subdirs:
            # ƒê·ªá quy g·ªçi h√†m n√†y v·ªõi doc_type l√† t√™n th∆∞ m·ª•c con, nh∆∞ng kh√¥ng c·∫ßn x√°c nh·∫≠n l·∫°i
            create_update_client_scripts_without_confirmation(doc_type=sub_folder)
        
        print("‚úÖ ƒê√£ ho√†n th√†nh x·ª≠ l√Ω to√†n b·ªô th∆∞ m·ª•c con.")
        return
    
    # Tr∆∞·ªùng h·ª£p 2 v√† 3: doc_type ƒë√£ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
    SCRIPT_FOLDER = os.path.join(SCRIPT_FOLDER_PARENT, doc_type)
    
    if not os.path.exists(SCRIPT_FOLDER):
        print(f"‚ùå Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {SCRIPT_FOLDER}")
        return
    
    # Tr∆∞·ªùng h·ª£p 3: X·ª≠ l√Ω m·ªôt file c·ª• th·ªÉ
    if script_name is not None:
        file_name = f"{script_name}.js"
        file_path = os.path.join(SCRIPT_FOLDER, file_name)
        
        if not os.path.exists(file_path):
            print(f"‚ùå File kh√¥ng t·ªìn t·∫°i: {file_path}")
            return
        
        process_script_file(file_path, script_name, doc_type)
        return
    
    # Tr∆∞·ªùng h·ª£p 2: X·ª≠ l√Ω t·∫•t c·∫£ c√°c file trong th∆∞ m·ª•c
    js_files = [f for f in os.listdir(SCRIPT_FOLDER) if f.endswith(".js")]
    if not js_files:
        print(f"‚ö†Ô∏è Kh√¥ng c√≥ file .js n√†o trong th∆∞ m·ª•c: {SCRIPT_FOLDER}")
        return
    
    if not confirm_operation(f"S·∫Ω x·ª≠ l√Ω {len(js_files)} file script trong th∆∞ m·ª•c {doc_type}. Ti·∫øp t·ª•c?"):
        print("‚ùå ƒê√£ h·ªßy thao t√°c.")
        return
    
    print(f"üìÇ ƒêang qu√©t th∆∞ m·ª•c: {SCRIPT_FOLDER}")
    
    for file_name in js_files:
        file_path = os.path.join(SCRIPT_FOLDER, file_name)
        script_name = file_name.replace(".js", "")
        
        process_script_file(file_path, script_name, doc_type)

def create_update_client_scripts_without_confirmation(doc_type):
    """
    Phi√™n b·∫£n kh√¥ng y√™u c·∫ßu x√°c nh·∫≠n c·ªßa h√†m ch√≠nh, d√πng cho x·ª≠ l√Ω ƒë·ªá quy c√°c th∆∞ m·ª•c con
    sau khi ƒë√£ x√°c nh·∫≠n ·ªü c·∫•p cao nh·∫•t.
    """
    SCRIPT_FOLDER = os.path.join(SCRIPT_FOLDER_PARENT, doc_type)
    
    if not os.path.exists(SCRIPT_FOLDER):
        print(f"‚ùå Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {SCRIPT_FOLDER}")
        return
    
    print(f"üìÇ ƒêang qu√©t th∆∞ m·ª•c: {SCRIPT_FOLDER}")
    
    for file_name in os.listdir(SCRIPT_FOLDER):
        if file_name.endswith(".js"):
            file_path = os.path.join(SCRIPT_FOLDER, file_name)
            script_name = file_name.replace(".js", "")
            
            process_script_file(file_path, script_name, doc_type)

def count_js_files_in_subdirectories(folder_path):
    """
    ƒê·∫øm s·ªë l∆∞·ª£ng file .js trong c√°c th∆∞ m·ª•c con, b·ªè qua c√°c file tr·ª±c ti·∫øp trong th∆∞ m·ª•c g·ªëc
    """
    count = 0
    # L·∫∑p qua c√°c m·ª•c trong th∆∞ m·ª•c g·ªëc
    for item in os.listdir(folder_path):
        item_path = os.path.join(folder_path, item)
        # Ch·ªâ x·ª≠ l√Ω c√°c th∆∞ m·ª•c, b·ªè qua file
        if os.path.isdir(item_path):
            # ƒê·∫øm c√°c file .js trong th∆∞ m·ª•c con n√†y v√† c√°c th∆∞ m·ª•c con c·ªßa n√≥
            for root, dirs, files in os.walk(item_path):
                count += sum(1 for f in files if f.endswith('.js'))
    return count

def confirm_operation(message):
    """
    Hi·ªÉn th·ªã th√¥ng b√°o x√°c nh·∫≠n v√† tr·∫£ v·ªÅ True n·∫øu ng∆∞·ªùi d√πng ƒë·ªìng √Ω, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ False
    """
    response = input(f"\n‚ö†Ô∏è {message} (y/n): ")
    return response.lower() in ['y', 'yes']

def process_script_file(file_path, script_name, doc_type):
    """
    X·ª≠ l√Ω m·ªôt file script: ƒë·ªçc n·ªôi dung v√† c·∫≠p nh·∫≠t ho·∫∑c t·∫°o m·ªõi trong database
    
    Parameters:
    file_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file script
    script_name (str): T√™n c·ªßa script (kh√¥ng bao g·ªìm ph·∫ßn m·ªü r·ªông .js)
    doc_type (str): T√™n c·ªßa document type
    """
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            script_content = file.read()
        
        file_name = os.path.basename(file_path)
        print(f"üìÑ ƒê·ªçc file: {file_name}")
        
        # Th√™m th·ªùi gian v√†o script tr∆∞·ªõc khi update ho·∫∑c t·∫°o m·ªõi
        updated_script = f"// Updated at {datetime.now()}\n" + script_content
        
        # Ki·ªÉm tra script c√≥ t·ªìn t·∫°i trong DB kh√¥ng
        existing_script = frappe.get_value("Client Script", script_name, "name")
        
        if existing_script:
            # C·∫≠p nh·∫≠t script v√†o DB
            frappe.db.set_value("Client Script", script_name, "script", updated_script)
            frappe.db.commit()
            print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t: {script_name}")
        else:
            # T·∫°o m·ªõi Client Script
            doc = frappe.new_doc("Client Script")
            doc.dt = doc_type  # S·ª≠ d·ª•ng doc_type ƒë∆∞·ª£c truy·ªÅn v√†o
            doc.name = script_name
            doc.script = updated_script
            doc.enabled = 1  # M·∫∑c ƒë·ªãnh l√† b·∫≠t
            doc.insert()
            frappe.db.commit()
            print(f"‚úÖ ƒê√£ t·∫°o m·ªõi: {script_name} cho DocType: {doc_type}")
    
    except Exception as e:
        print(f"‚ùå L·ªói khi x·ª≠ l√Ω {os.path.basename(file_path)}: {e}")

'''
bench --site erp.tiqn.local console
import custom_features.custom_features.bulk_update_scripts.create_update_client_scripts as script
1. Create, update all file.js in all sub-folder of "client_scripts": 
    script.create_update_client_scripts()
2. Create, update all file.js in ONE sub-folder of "client_scripts": 
    script.create_update_client_scripts(doc_type="Item")
3. Create, update ONE file.js in ONE sub-folder of "client_scripts": 
    script.create_update_client_scripts(doc_type="Item", script_name="create_new_item") 
'''        